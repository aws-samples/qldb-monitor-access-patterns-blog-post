# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Parameters:
  QLDBLedgerName:
    Description: Name for QLDB Ledger
    Type: String
    MinLength: "1"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: shipments
  apiGatewayName:
    Type: String
    Default: qldb-shipment
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev
Resources:
  QLDBLedger:
    Type: "AWS::QLDB::Ledger"
    Properties:
      DeletionProtection: false
      Name: !Ref QLDBLedgerName
      PermissionsMode: "STANDARD"
  QLDBLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/pyqldb-3-1-0-python38.zip
      Description: pyqldb-3-1-0-python38
      LayerName: pyqldb-3-1-0-python38
      LicenseInfo: MIT-0
  HelperLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: !Sub 'qldb-streaming-lab-${AWS::Region}'
        S3Key: lambda_layers/python/crhelper-2-0-7-python38.zip
      Description: crhelper-2-0-7-python38
      LayerName: crhelper-2-0-7-python38
      LicenseInfo: MIT-0
  CRFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
         import os
         import time
         from logging import basicConfig, getLogger, INFO
         from crhelper import CfnResource
         from pyqldb.config.retry_config import RetryConfig
         from pyqldb.driver.qldb_driver import QldbDriver

         logger = getLogger(__name__)
         helper = CfnResource(json_logging=False, log_level='DEBUG', boto_level='CRITICAL', sleep_on_delete=60)

         try:
            retry_config = RetryConfig(retry_limit=3)
            qldb_driver = QldbDriver(os.environ['qldb_ledger'], retry_config=retry_config)
         except Exception as e:
            helper.init_failure(e)

         @helper.update
         def update(event, context):
            try:
               logger.info("Got Update")
            except Exception as e:
               raise ValueError("CR update error: " + str(e))

         @helper.delete
         def delete(event, context):
            try:
               logger.info("Got Delete")
            except Exception as e:
               raise ValueError("CR delete error: " + str(e))

         @helper.create  
         def create(event, _):
            logger.info("Got Create")
            logger.info(event)
            try:
               qldb_driver.execute_lambda(lambda executor: create_table(executor,"Shipments"))
               time.sleep(1)
               qldb_driver.execute_lambda(lambda executor: create_index(executor,"Shipments","id"))
               time.sleep(1)
               helper.Data.update({"Response": "Success"})
            except Exception as e:
               raise ValueError("CR create error: " + str(e))
            return "Created"

         def create_table(transaction_executor,tableName):
            logger.info("Creating a table")
            transaction_executor.execute_statement(f"CREATE TABLE {tableName}")

         def create_index(transaction_executor,tableName,index):
            logger.info("Creating an index")
            transaction_executor.execute_statement(f"CREATE INDEX ON {tableName}({index})")
            
         def lambda_handler(event, context):
            helper(event, context)
      Handler: index.lambda_handler
      Role: !GetAtt
        - QLDBLambdaRole
        - Arn
      Runtime: python3.8
      Timeout: 900
      MemorySize: 5120
      Layers:
        - Ref: HelperLayer
        - Ref: QLDBLayer
      Environment:
        Variables:
          qldb_ledger: !Ref QLDBLedgerName
  QLDBLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  QLDBLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "qldb:SendCommand"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/${QLDBLedgerName}"
          - Action:
              - "qldb:PartiQLCreateTable"
              - "qldb:PartiQLCreateIndex"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/${QLDBLedgerName}/*"
        Version: "2012-10-17"
      PolicyName: QLDBLambdaPolicy
      Roles:
        - Ref: QLDBLambdaRole
  CRLambda:
    DependsOn:
      [CRFunction, QLDBLambdaRole, QLDBLambdaPolicy, QLDBLedger]
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt
        - CRFunction
        - Arn
      LedgerName: !Ref QLDBLedgerName
  apiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref apiGatewayName
      EndpointConfiguration:
        Types:
          - REGIONAL
  apiGwExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "QLDB:*"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "qldb:SendCommand"
                Resource:
                  - !Sub "arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/${QLDBLedgerName}"
              - Effect: Allow
                Action:
                  - "qldb:PartiQLInsert"
                  - "qldb:PartiQLSelect"
                  - "qldb:PartiQLHistoryFunction"
                Resource:
                  - !Sub "arn:aws:qldb:${AWS::Region}:${AWS::AccountId}:ledger/${QLDBLedgerName}/*"
  apiGatewayResourcePathGetBlock:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref apiGatewayRestApi
      ParentId: !GetAtt
        - apiGatewayRestApi
        - RootResourceId
      PathPart: "getblock"
    DependsOn:
      - apiGatewayRestApi
  apiGatewayResourcePathAdd:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref apiGatewayRestApi
      ParentId: !GetAtt
        - apiGatewayRestApi
        - RootResourceId
      PathPart: "addevent"
    DependsOn:
      - apiGatewayRestApi
  apiGatewayGetBlockMethod:
    DependsOn: 
      - apiGwExecutionRole
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref apiGatewayRestApi
      ResourceId: !Ref apiGatewayResourcePathGetBlock
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaGetBlockArn}/invocations
          - lambdaGetBlockArn: !GetAtt lambdaGetBlockFunction.Arn
  apiGatewayAddMethod:
    DependsOn: 
      - apiGwExecutionRole
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref apiGatewayRestApi
      ResourceId: !Ref apiGatewayResourcePathAdd
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaAddArn}/invocations
          - lambdaAddArn: !GetAtt lambdaAddFunction.Arn
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref apiGatewayRestApi
    DependsOn:
      - apiGatewayGetBlockMethod
      - apiGatewayAddMethod
  apiGatewayStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: !Ref apiGatewayStageName
      RestApiId: !Ref apiGatewayRestApi
      DeploymentId: !Ref apiGatewayDeployment
      AccessLogSetting:
        DestinationArn: !Sub ${apiLogGroup.Arn}
        Format: >-
          {
          "apigw":{
          "api_id":"$context.apiId",
          "stage":"$context.stage",
          "route_key":"$context.routeKey",
          "request_id":"$context.requestId",
          "aws_endpoint_request_id":"$context.awsEndpointRequestId",
          "extended_request_id":"$context.extendedRequestId"
          },
          "client":{
          "ip":"$context.identity.sourceIp"
          },
          "request":{
          "time":"$context.requestTime",
          "time_epoch":"$context.requestTimeEpoch",
          "http_method":"$context.httpMethod",
          "path":"$context.path",
          "protocol":"$context.protocol"
          },
          "integration":{
          "latency":"$context.integrationLatency",
          "status":"$context.integrationStatus"
          },
          "response":{
          "latency":"$context.responseLatency",
          "status":"$context.status",
          "length":"$context.responseLength"
          }
          }
      MethodSettings:
        - ResourcePath: "/getblock"
          HttpMethod: POST
          LoggingLevel: INFO
        - ResourcePath: "/addevent"
          HttpMethod: POST
          LoggingLevel: INFO
    DependsOn:
      - apiGatewayDeployment
  apiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api/${apiGatewayName}
      RetentionInDays: 90
  lambdaAddFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import logging
          import json
          import amazon.ion.simpleion as simpleion
          from pyqldb.driver.qldb_driver import QldbDriver

          # Set logging
          level = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
          logger = logging.getLogger()
          logger.setLevel(level[1])

          # Set Environ variables
          qldb_ledger = os.environ["QLDBLEDGER"]
          qldb_table = os.environ["QLDBTABLE"]

          # Set QLDB Driver
          qldb_driver = QldbDriver(ledger_name=qldb_ledger)
          logger.debug(f"Connected to QLDB ledger: {qldb_ledger}")

          def statement_statistics(cursor):
              consumed_ios = cursor.get_consumed_ios()
              if consumed_ios:
                  read_ios = consumed_ios.get('ReadIOs')
                  #write_ios = consumed_ios.get('WriteIOs')
              else:
                  read_ios = 0
                  #write_ios = 0
              timing_information = cursor.get_timing_information()
              processing_time_milliseconds = timing_information.get('ProcessingTimeMilliseconds')
              result = {
                "processing_time_milliseconds":processing_time_milliseconds,
                "read_ios":read_ios#,
                #"write_ios":write_ios
              }
              logger.info(result)

          def add_document(transaction_executor, data):
              # Check if doc with id = shipment_id exists
              statement_read = "SELECT * FROM {0} WHERE id = ?".format(qldb_table)
              logger.debug(f"Read Statement: {statement_read}")
              cursor = transaction_executor.execute_statement(statement_read, data["id"])
              statement_statistics(cursor)
              # Check if there is any record in the cursor
              logger.debug(dir(transaction_executor))
              first_record = next(cursor, None)
              if first_record:
                  return_string = {
                      "response": "Duplicate Item",
                      "transaction_id": transaction_executor.transaction_id,
                  }
              else:
                  statement_insert = "INSERT INTO {0} ?".format(qldb_table)
                  logger.debug(f"Insert Statement: {statement_insert}")
                  cursor = transaction_executor.execute_statement(statement_insert, data)
                  statement_statistics(cursor)
                  # Get doc_id from inserted record
                  first_record = next(cursor, None)
                  return_string = {
                      "response": "Processed Item",
                      "transaction_id": transaction_executor.transaction_id,
                      "document_id": first_record["documentId"],
                  }

              return return_string


          def handler(event, context):
              logger.debug(event)
              response = qldb_driver.execute_lambda(
                  lambda executor: add_document(executor, json.loads(event["body"]))
              )
              logger.info(response)
              return {
                  "body": "{0}".format(response),
                  "headers": {"Content-Type": "json/application"},
                  "statusCode": 200,
              }
      Description: Example Lambda function
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt apiGwExecutionRole.Arn
      Runtime: python3.8
      Layers:
        - Ref: QLDBLayer         
      Environment:
        Variables:
          QLDBLEDGER: !Ref QLDBLedgerName
          QLDBTABLE: Shipments
  lambdaGetBlockFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import logging
          import amazon.ion.simpleion as ion
          from amazon.ion.json_encoder import IonToJSONEncoder
          from pyqldb.driver.qldb_driver import QldbDriver


          # Set QLDB client
          qldb_client = boto3.client('qldb')

          # Set logging
          level = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
          logger = logging.getLogger()
          logger.setLevel(level[1])

          # Set Environ variables
          qldb_ledger = os.environ["QLDBLEDGER"]
          qldb_table = os.environ["QLDBTABLE"]

          # Set QLDB Driver
          qldb_driver = QldbDriver(ledger_name=qldb_ledger)

          # get block info from history function with document id and transaction id
          def get_block_info(transaction_executor, data):

              # Check if doc with GovId = gov_id exists
              statement = "SELECT blockAddress FROM history({0}) WHERE metadata.id = ? and metadata.txId = ?".format(qldb_table)
              
              cursor = transaction_executor.execute_statement(statement, data['document_id'], data['transaction_id'])
              # Check if there is any record in the cursor
              first_record = next(cursor, None)
              logger.debug(json.dumps(first_record, cls=IonToJSONEncoder))
              block_info = first_record
              
              return block_info
              
          # get block from QLDB journal
          def get_block(blockaddress):
            blockAddress_clean = json.dumps(blockaddress, cls=IonToJSONEncoder)
            response = qldb_client.get_block(
                Name=qldb_ledger,
                BlockAddress={
                    'IonText': blockAddress_clean 
                }
            )
            return response

          # get statements from ion text
          def get_statements(statements):
            json_statements = []
            for each in statements:
              each.pop('statementDigest')
              json_statements.append(json.dumps(each, cls=IonToJSONEncoder))
              
            return json_statements

          def handler(event, context):
            logger.debug(event)
            block_info = qldb_driver.execute_lambda(lambda executor: get_block_info(executor, json.loads(event['body'])))
            result = get_block(block_info['blockAddress'])
            # convert to ion
            result_ion = ion.loads(result['Block']['IonText'])
            logger.debug(json.dumps(result_ion, cls=IonToJSONEncoder))
            # return only the transaction statements
            if json.loads(event['body'])['response'] == 'full':
              txn_statements = json.dumps(result_ion, cls=IonToJSONEncoder)
            elif json.loads(event['body'])['response'] == 'statement_summary':
              txn_statements = get_statements(result_ion['transactionInfo']['statements'])
            else:
              # add to for more options
              txn_statements = get_statements(result_ion['transactionInfo']['statements'])
            return {
              "body": '"{0}"'.format(txn_statements),  
              "headers": {
                "Content-Type": "application/json"
              },
              "statusCode": 200
            }
      Description: Example Lambda function
      Handler: index.handler
      MemorySize: 512
      Role: !GetAtt apiGwExecutionRole.Arn
      Runtime: python3.8
      Layers:
        - Ref: QLDBLayer   
      Environment:
        Variables:
          QLDBLEDGER: !Ref QLDBLedgerName
          QLDBTABLE: Shipments
  lambdaApiGatewayInvokeAdd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaAddFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGatewayRestApi}/*/*
  lambdaApiGatewayInvokeGetBlock:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaGetBlockFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGatewayRestApi}/*/*
Outputs:
  apiGatewayInvokeURLForAddEvent:
    Value: !Join
              - ''
              - - 'curl -H "Content-Type: application/json" -X POST -d '
                - "'"
                - '{"id":"123456", "product_name":"alexa dot", "source_location":"MKE2", "target_location":"ORD11", "status":"shipped"}'
                - "' "
                - !Sub https://${apiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/addevent
  apiGatewayInvokeURLForGetBlock:
    Value: !Join
              - ''
              - - 'curl -H "Content-Type: application/json" -X POST -d '
                - "'"
                - '{"document_id":"XXXXXXXXXX", "transaction_id":"XXXXXXXXXX", "response":"statement_summary"}'
                - "' "
                - !Sub https://${apiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/getblock
  lambdaAddArn:
    Value: !GetAtt lambdaAddFunction.Arn
  lambdaGetBlockArn:
    Value: !GetAtt lambdaGetBlockFunction.Arn